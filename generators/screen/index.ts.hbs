/**
 *
 * {{properCase name }}
 *
 */
import React, {
  useState,
  useEffect,
  useContext,
} from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
import { makeSelect{{properCase name}}State, makeSelectLoading, makeSelectError} from './selectors';
import { {{ properCase name }}Action } from './actions';
import { ActionArr } from './constants';
import { View, Text, StyleSheet } from 'react-native';
import selectedTheme from '../../styles/theme';

const styles = StyleSheet.create({
  {{ lowerCase name }}Container: {
    flex: 1,
  },
});

export const {{ properCase name }} = () => {

  return (
    <View style={styles.{{ lowerCase name }}Container}>
      <Text>
        {{properCase name}} screen
      </Text>
    </View>
  );
};

{{ properCase name }}.propTypes = {
  {{ properCase name }}Start: PropTypes.func.isRequired,
};

export const mapStateToProps = () => {
  // @dev you can pass props to makeSelectFuncs(props) like so.
  return createStructuredSelector({
    {{ camelCase name }}: makeSelect{{properCase name}}State(),
    loading: makeSelectLoading(),
    error: makeSelectError(),
});
};

export const mapDispatchToProps = () => {
  return {
    {{ properCase name }}Start: (data: ActionArr) => {{ properCase name }}Action.start(data),
  };
};

export default connect(mapStateToProps, mapDispatchToProps)({{ properCase name }});
